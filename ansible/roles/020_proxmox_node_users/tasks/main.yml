---
- name: Check if role exists
  shell: pveum role list --output-format=json | jq -r "any(.[].roleid; . == \"{{ proxmox_role_name | quote }}\")"
  register: has_role
  changed_when: has_role.stdout == "false"

- name: Add role if not exists
  shell: pveum role add {{ proxmox_role_name }} -privs "{{ privs }}"
  when: has_role.stdout == "false"

- name: Get password for ansible user
  local_action:
    shell pass Homelab/proxmox/users/ansible;
    # password=$( pass Homelab/proxmox/users/ansible | cut -d$'\n' -f1);
    # echo $password;
  # local_action:
  #   module: shell
  #   _raw_params: |
  #     pass Homelab/proxmox/users/ansible
  #     password=$( pass Homelab/proxmox/users/ansible | cut -d$'\n' -f1)
  #     echo $password
  register: password
  changed_when: false

- name: Check if user exists
  shell: pveum user list --output-format=json | jq -r "any(.[].userid; . == \"{{ proxmox_user_name | quote }}\")"
  register: has_user
  changed_when: has_user.stdout == "false"

- name: Add user if not exists
  shell: pveum user add "{{ proxmox_user_name }}" --password "{{ password.stdout }}"
  when: has_user.stdout == "false"

- name: Check if ACL state is correct
  shell: pveum acl list --output-format=json | jq -r ". | any((.ugid == \"{{ proxmox_user_name | quote }}\") and .roleid == \"{{ proxmox_role_name | quote }}\")"
  register: has_acl
  changed_when: has_acl.stdout == "false"

- name: Modify ACL
  shell: pveum aclmod / -user "{{ proxmox_user_name }}" -role "{{ proxmox_role_name }}"
  when: has_acl.stdout == "false"
