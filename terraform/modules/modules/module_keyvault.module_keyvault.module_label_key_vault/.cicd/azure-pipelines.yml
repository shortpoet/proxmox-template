name: '$(Build.DefinitionName)_$(Build.BuildId)'

parameters:
  - name: 'Environment'
    displayName: 'Environment'
    type: string
    default: 'Dev'
    values:
    - 'Stg'
    - 'Dev'
    - 'Prod'
  - name: 'BackendProvider'
    displayName: 'Backend Provider'
    type: string
    default: 'TerraformCloud'
    values:
    - 'TerraformCloud'
    - 'AzureRm'

variables:
- group: Sparq.ARM.Service.Connection
- group: Terraform.Sparq
- name: system.debug
  value: true
- name: 'terraformDirectory'
  value: '$(Build.SourcesDirectory)/.iac'
- name: 'subscriptionConnection'
  value: '$(Sp.Sparq.${{ parameters.Environment }}.Infra)'
- name: requiredResources
  value: 'rg-sparq-dev-infra'
- name: requiredResourceAddresses
  value: 'azurerm_resource_group.rg'

trigger:
  paths:
    exclude:
      - README.md
      - .gitignore
      - scripts

stages:
  - stage: 'terraformConfig'
    displayName: 'Configure Terraform'
    # ${{ if eq(parameters['Environment'], 'dev') }}:
    # variables:
    #   - group: Sparq.Dev.ARM.Service.Principal
    #   subscriptionConnection: $(Sp.Sparq.Dev.Infra)
    variables:
    - ${{ if eq(parameters['Environment'], 'Dev') }}:
      - group: Sparq.Dev.ARM.Service.Principal
    - ${{ if eq(parameters['Environment'], 'stg') }}:
      - group: Sparq.Stg.ARM.Service.Principal
        subscriptionConnection: $(Sp.Sparq.Stg.Infra)
    - ${{ if eq(parameters['Environment'], 'prod') }}:
      - group: Sparq.Prod.ARM.Service.Principal
        subscriptionConnection: $(Sp.Sparq.Prod.Infra)
    jobs:
    - job: 'checkTerraform'
      displayName: 'Check Terraform'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - task: PowerShell@2
          name: 'checkTerraform'
          displayName: 'Check Terraform'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            targetType: 'inline'
            script: |
              terraform --version
              az --version
        # - script: 'env | sort'
        #   displayName: 'print env'     
        # - task: AzureCLI@2
        #   name: 'checkARMSubBash'
        #   displayName: 'Check ARM Subscription'
        #   env:
        #     ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
        #     ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
        #     ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
        #     ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
        #   inputs:
        #     azureSubscription: $(subscriptionConnection) # works bec not secret var
        #     scriptType: 'bash'
        #     scriptLocation: 'inlineScript'
        #     inlineScript: |
        #       env | sort
        #     powerShellErrorActionPreference: 'silentlyContinue'
        #     addSpnToEnvironment: true
        - task: AzureCLI@2
          name: 'checkARMSub'
          displayName: 'Check ARM Subscription'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            azureSubscription: $(subscriptionConnection) # works bec not secret var
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az account list
              echo "rg name $(TF_STATE_RESOURCE_GROUP_NAME)"
              echo "stor acc name $(TF_STATE_STORAGE_ACCOUNT_NAME)"
              echo "state cont name $(TF_STATE_CONTAINER_NAME)"
              echo "tf dir $(terraformDirectory)"
              echo "env:servicePrincipalId $($env:servicePrincipalId)"
              echo "env:servicePrincipalKey $($env:servicePrincipalKey)"
              echo "env:tenantId $($env:tenantId)"
              echo "env"
              gci env: | Format-Table -Wrap -AutoSize
              echo "creds are different: one set belongs to $(subscriptionConnection) - the other to: the auto-generated one for fg-sparq/IaC-Modules"
              echo "$($($env:ARM_CLIENT_ID) -eq $($env:servicePrincipalId))"
              echo "$($($env:ARM_CLIENT_SECRET) -eq $($env:servicePrincipalKey))"
              echo "$($($env:ARM_TENANT_ID) -eq $($env:tenantId))"
              $($env:ARM_CLIENT_ID).ToCharArray()
              echo "########"
              $($env:servicePrincipalId).ToCharArray()
              echo "########"
              $($env:ARM_CLIENT_SECRET).ToCharArray()
              echo "########"
              $($env:servicePrincipalKey).ToCharArray()
            powerShellErrorActionPreference: 'silentlyContinue'
            addSpnToEnvironment: false
        - task: AzureCLI@2
          name: 'terraformInit'
          displayName: 'Run Terraform Init'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            azureSubscription: $(subscriptionConnection) # works bec not secret var
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # Propagate pipeline Service Principal as Terraform variables if not present as env vars
              $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
              $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
              $env:ARM_TENANT_ID       ??= $env:tenantId
              # Propagate from Azure CLI context
              $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
              $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)              
              # Put Terraform commands after this line
              if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
                terraform init -backend-config="token=$(Terraform.Cloud.Teams.API.Token)"
              } else {
                terraform init -backend-config="./backends/backend-azure.tf"
              }

              ls
            addSpnToEnvironment: true
            useGlobalConfig: true
            failOnStandardError: true
            powerShellIgnoreLASTEXITCODE: false
            workingDirectory: '$(terraformDirectory)'
        # 
        # this is only needed if resource is declared in .tf
        #
        # - task: AzureCLI@2
        #   name: 'terraformImport'
        #   displayName: 'Run Terraform Import'
        #   env:
        #     ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
        #     ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
        #     ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
        #     ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
        #   inputs:
        #     azureSubscription: $(subscriptionConnection) # works bec not secret var
        #     scriptType: pscore
        #     scriptLocation: inlineScript
        #     inlineScript: |
        #       $resourceName = "$(requiredResources)" # might have to delimiter separate in future
        #       $resourceAddress = "$(requiredResourceAddresses)" # might have to delimiter separate in future
        #       $showObj=$(terraform show -json | ConvertFrom-Json)
        #       echo $showObj
        #       $hasValues=[bool]($showObj.PSobject.Properties.Name -match "values")
        #       echo $hasValues
        #       if ($hasValues) {
        #         echo 'tf show has resource values'
        #         $resObj=$($showObj.values.root_module.resources | ? { $_.values.name -eq "$resourceName" -and $_.address -eq "$resourceAddress" })
        #         if ($resObj -ne $null) {
        #           echo "has required resources"
        #         } else {
        #           echo 'NOT required resources'
        #           $id=$(az group show -n $resourceName --query id)
        #           terraform import $resourceAddress $id # might have to account for diff az commands in map in future
        #         }
        #       } else {
        #         echo 'tf show NO resource values'
        #         $id=$(az group show -n $resourceName --query id)
        #         terraform import $resourceAddress $id # might have to account for diff az commands in map in future
        #       }
        #     addSpnToEnvironment: false
        #     useGlobalConfig: true
        #     failOnStandardError: true
        #     powerShellIgnoreLASTEXITCODE: false
        #     workingDirectory: '$(terraformDirectory)'
        - task: AzureCLI@2
          name: 'terraformPlan'
          displayName: 'Run Terraform Plan'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            azureSubscription: $(subscriptionConnection) # works bec not secret var
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # Propagate pipeline Service Principal as Terraform variables if not present as env vars
              $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
              $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
              $env:ARM_TENANT_ID       ??= $env:tenantId
              # Propagate from Azure CLI context
              $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
              $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv) 
              gci env:                           
              # Put Terraform commands after this line
              if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
                terraform plan -out deployment.tfplan
              } else {
                terraform plan -out deployment.tfplan
              }

              ls
            addSpnToEnvironment: true
            useGlobalConfig: true
            failOnStandardError: true
            powerShellIgnoreLASTEXITCODE: false
            workingDirectory: '$(terraformDirectory)'
        - task: AzureCLI@2
          name: 'terraformShow'
          displayName: 'Run Terraform Show'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            azureSubscription: $(subscriptionConnection) # works bec not secret var
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # Propagate pipeline Service Principal as Terraform variables if not present as env vars
              $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
              $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
              $env:ARM_TENANT_ID       ??= $env:tenantId
              # Propagate from Azure CLI context
              $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
              $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)              
              # Put Terraform commands after this line
              if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
                terraform show deployment.tfplan
              } else {
                terraform show deployment.tfplan
              }
              ls
            addSpnToEnvironment: true
            useGlobalConfig: true
            failOnStandardError: true
            powerShellIgnoreLASTEXITCODE: false
            workingDirectory: '$(terraformDirectory)'
        - task: AzureCLI@2
          name: 'terraformApply'
          displayName: 'Run Terraform Apply'
          env:
            ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
            ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
            ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
            ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
          inputs:
            azureSubscription: $(subscriptionConnection) # works bec not secret var
            scriptType: pscore
            scriptLocation: inlineScript
            inlineScript: |
              # Propagate pipeline Service Principal as Terraform variables if not present as env vars
              $env:ARM_CLIENT_ID       ??= $env:servicePrincipalId
              $env:ARM_CLIENT_SECRET   ??= $env:servicePrincipalKey
              $env:ARM_TENANT_ID       ??= $env:tenantId
              # Propagate from Azure CLI context
              $env:ARM_TENANT_ID       ??= $(az account show --query tenantId -o tsv)
              $env:ARM_SUBSCRIPTION_ID ??= $(az account show --query id -o tsv)              
              # Put Terraform commands after this line
              if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
                terraform apply -auto-approve deployment.tfplan
              } else {
                terraform show -auto-approve deployment.tfplan
              }
              ls
            addSpnToEnvironment: true
            useGlobalConfig: true
            failOnStandardError: true
            powerShellIgnoreLASTEXITCODE: false
            workingDirectory: '$(terraformDirectory)'
        # - task: Bash@3
        #   name: 'terraformPlan'
        #   displayName: 'Run Terraform Plan'
        #   env:
        #     ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
        #     ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
        #     ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
        #     ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       echo "terraform plan"
        #       terraform plan
        #       # if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
        #       #   terraform plan
        #       # } else {
        #       #   terraform plan -out deployment.tfplan
        #       # }
        #       ls
        #     workingDirectory: $(terraformDirectory)
        # - task: Bash@3
        #   name: 'terraformShow'
        #   displayName: 'Run Terraform Show'
        #   env:
        #     ARM_TENANT_ID: $(Facilis.ARM.Tenant.Id)
        #     ARM_SUBSCRIPTION_ID: $(Sparq-ARM-Subscription-Id)
        #     ARM_CLIENT_ID: $(Sparq-Infra-ARM-Service-Principal-App-Id)
        #     ARM_CLIENT_SECRET: $(Sparq-Infra-ARM-Service-Principal-App-Password)
        #   inputs:
        #     targetType: 'inline'
        #     script: |
        #       echo "terraform show"
        #       terraform show
        #       # if ("${{ parameters.BackendProvider }}" -eq "TerraformCloud") {
        #       #   terraform show
        #       # } else {
        #       #   terraform show -out deployment.tfplan
        #       # }
        #     workingDirectory: $(terraformDirectory)